" Make Vim more useful
set nocompatible
" Use the OS clipboard by default, on versions compiled with +clipboard
set clipboard=unnamed
" Enhance command-line completion
set wildmenu
" Allow cursor keys in insert mode
set esckeys
" Allow backspace in insert mode
set backspace=indent,eol,start
" Optimize for fast terminal connections
set ttyfast
" Add the g flag to search/replace by default
set gdefault
" Use UTF-8 without BOM
set encoding=utf-8 nobomb
" Change mapleader
let mapleader=","
" Don’t add empty newlines at the end of files
set binary
set noeol
" Centralize backups, swapfiles and undo history
set backupdir=~/.vim/backups
" if you get an error, make sure you have: mkdir -p ~/.vim/backups
set directory=~/.vim/swaps
" if you get an error, make sure you have: mkdir -p ~/.vim/swaps
if exists("&undodir")
	set undodir=~/.vim/undo
endif
" Don’t create backups when editing files in certain directories
set backupskip=/tmp/*,/private/tmp/*
" Respect modeline in files
set modeline
set modelines=4
" Enable per-directory .vimrc files and disable unsafe commands in them
" set exrc
set secure
" Enable line numbers
set number
" Enable syntax highlighting
syntax on
" Highlight current line
set cursorline
" Make tabs as wide as two spaces
set tabstop=2
" Show “invisible” characters
set lcs=tab:▸\ ,trail:·,eol:¬,nbsp:_
set list
" Highlight searches
set hlsearch
" Ignore case of searches
set ignorecase
" Highlight dynamically as pattern is typed
set incsearch
" Always show status line
set laststatus=2
" Enable mouse in all modes
set mouse=a
" Disable error bells
set noerrorbells
" Don’t reset cursor to start of line when moving around.
set nostartofline
" Show the cursor position
set ruler
" Don’t show the intro message when starting Vim
set shortmess=atI
" Show the current mode
set showmode
" Show the filename in the window titlebar
set title
" Show the (partial) command as it’s being typed
set showcmd
" Use relative line numbers
if exists("&relativenumber")
	set relativenumber
	au BufReadPost * set relativenumber
endif
" Start scrolling three lines before the horizontal window border
set scrolloff=3
" Strip trailing whitespace (,ss)
function! StripWhitespace()
	let save_cursor = getpos(".")
	let old_query = getreg('/')
	:%s/\s\+$//e
	call setpos('.', save_cursor)
	call setreg('/', old_query)
endfunction
noremap <leader>ss :call StripWhitespace()<CR>
" Save a file as root (,W)
noremap <leader>W :w !sudo tee % > /dev/null<CR>
" Automatic commands
if has("autocmd")
	" Enable file type detection
	filetype on
	" Treat .json files as .js
	autocmd BufNewFile,BufRead *.json setfiletype json syntax=javascript
	" Treat .md files as Markdown
	autocmd BufNewFile,BufRead *.md setlocal filetype=markdown
endif
" ctrlp settings
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_root_markers = ['.git', '.hg', 'Rakefile']
let g:ctrlp_custom_ignore = '\v[\/](\.(git|hg|svn))|(node_modules|vendor|coverage|target)$'
" use silver searcher
" http://robots.thoughtbot.com/faster-grepping-in-vim
if executable('ag')
" Use ag over grep
	set grepprg=ag\ --nogroup\ --nocolor
	" Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
	let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
  " ag is fast enough that CtrlP doesn't need to cache
	let g:ctrlp_use_caching = 0
endif
let g:html_indent_inctags = "html,body,head,tbody"
let g:html_indent_script1 = "inc"
let g:html_indent_style1 = "inc"
" bind \ (backward slash) to grep shortcut
" command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
nnoremap \ :Ag<SPACE>
" vim-ruby-test config
" let g:rubytest_in_quickfix = 1
let g:rubytest_cmd_test = "clear && ruby -Itest %p"
let g:rubytest_cmd_testcase = "clear && ruby -Itest %p -n '/%c/'"
let g:rubytest_cmd_spec = "clear && rspec %p --debug"
let g:rubytest_cmd_example = "clear && rspec %p -l %c --debug"
let g:rubytest_cmd_feature = "clear && cucumber %p"
let g:rubytest_cmd_story = "clear && cucumber %p -n '%c'"
" set commands to use tabs
set hidden
nnoremap <c-m> :bnext<CR>
nnoremap <c-n> :bprev<CR>
" save vim session windows and tabs
nnoremap <c-s> :mksession ~/.vim/.mysession.vim
nnoremap <c-r> :source ~/.vim/.mysession.vim
" reload vim config file without close vim
nnoremap <c-c> :source ~/.vimrc
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Vundle:
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
" call vundle#begin('~/some/path/here')

" let Vundle manage Vundle (required)
Plugin 'VundleVim/Vundle.vim'

" -> plugin for files tree with git status flags
Plugin 'scrooloose/nerdtree'
Plugin 'Xuyuanp/nerdtree-git-plugin'
"open NERDTree with Ctrl+n
map <C-n> :NERDTreeToggle<CR>

" -> plugin for sintax
Plugin 'scrooloose/syntastic'

" -> plugin for json
Plugin 'elzr/vim-json'

" -> plugin for code completion
Plugin 'Valloric/YouCompleteMe'

" -> parenthesis style
Plugin 'kien/rainbow_parentheses.vim'

" -> plugin for when editing .tmux.conf file
Plugin 'tmux-plugins/vim-tmux'

" -> plugin for search something within all files on folder
Plugin 'rking/ag.vim'

" -> plugin for search for files
Plugin 'ctrlpvim/ctrlp.vim'

" -> plugin to alternate bteween vim and tmux panes
Plugin 'christoomey/vim-tmux-navigator'

" -> plugin to create tabs
Plugin 'ap/vim-buftabline'

" -> Colors plugins
Plugin 'tomasr/molokai'
Plugin 'flazz/vim-colorschemes'
Plugin 'altercation/vim-colors-solarized'

syntax on
"colorscheme monokai
colorscheme Tomorrow-Night-Eighties

"  All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

" To ignore plugin indent changes, instead use: filetype plugin on
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
" see :h vundle for more details or wiki for FAQ

" Put your non-Plugin stuff after this line

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Syntastic recommended settings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Activate Rainbow Parentheses
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" options:
"let g:rbpt_colorpairs = [
"    \ ['brown',       'RoyalBlue3'],
"    \ ['Darkblue',    'SeaGreen3'],
"    \ ['darkgray',    'DarkOrchid3'],
"    \ ['darkgreen',   'firebrick3'],
"    \ ['darkcyan',    'RoyalBlue3'],
"    \ ['darkred',     'SeaGreen3'],
"    \ ['darkmagenta', 'DarkOrchid3'],
"    \ ['brown',       'firebrick3'],
"    \ ['gray',        'RoyalBlue3'],
"    \ ['black',       'SeaGreen3'],
"    \ ['darkmagenta', 'DarkOrchid3'],
"    \ ['Darkblue',    'firebrick3'],
"    \ ['darkgreen',   'RoyalBlue3'],
"    \ ['darkcyan',    'SeaGreen3'],
"    \ ['darkred',     'DarkOrchid3'],
"    \ ['red',         'firebrick3'],
"    \ ]

let g:rbpt_max = 16
let g:rbpt_loadcmd_toggle = 0

" let g:rainbow_active = 1  " 0 if you want to enable it later via :RainbowToggle
autocmd VimEnter * RainbowParenthesesToggle
autocmd Syntax * RainbowParenthesesLoadRound
autocmd Syntax * RainbowParenthesesLoadSquare
autocmd Syntax * RainbowParenthesesLoadBraces

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => fix delete problems in insert mode
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set backspace=indent,eol,start

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => ...
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""